version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      to:
        default: "all"
        type: string
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              input=<<parameters.to>>

              if [ $input == s3f ]   
              then
                aws s3 rm s3://udapeople-u15ch1136f --recursive
                aws cloudformation delete-stack \
                --stack-name frontendu15ch1136f
              elif [ $input == backend ] 
              then
                aws cloudformation delete-stack \
                  --stack-name backendu15ch1136b
              else 
                aws s3 rm s3://udapeople-u15ch1136f --recursive
                aws cloudformation delete-stack \
                --stack-name backendu15ch1136b
                aws cloudformation delete-stack \
                --stack-name frontendu15ch1136f
              fi


            # Your code here
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: 46bbfdbc-6e4a-4446-9faa-56a5c2058c33" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            # SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            #  Add revert code here. You can find this in the Getting Started section.
            ss  
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
                cd frontend
                npm i
                npm run lint
                npm run build

           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run lint
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      - restore_cache:
          keys: [frontend-build]
      # Restore from cache
      - run:  
          name: Test front-end
          command: |
            cd frontend
            sudo apt install nodejs
            npm i
            npm run test
           
      # Your job code here
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      - restore_cache:
          keys: [backend-build]
      # Restore from cache
      - run:  
          name: Test back-end
          command: |
            cd backend
            sudo apt install nodejs
            npm i
            npm run test
            # Your code here
      # Your job code here
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      - restore_cache:
          keys: [frontend-build]
      # Restore from cache
      - run:  
          name: Scan front-end
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
      # Your job code here

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      - restore_cache:
          keys: [backend-build]
      # Restore from cache
      - run:  
          name: Scan back-end
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
      # Your job code here
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      # Checkout code from git
      - run:
          name: Install gzip tar
          command: |
                yum -y install tar
                yum -y install gzip
            
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-backend \
              --stack-name backendu15ch1136b \
              --parameter-overrides ID=u15ch1136b 
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity-frontend \
              --stack-name frontendu15ch1136f \
              --parameter-overrides ID=u15ch1136f   
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacity-backend" \
              --output text >> backend_url.txt
              curl -H "Content-Type: text/plain" -H "token: a9aafe79-89cc-4014-a391-25cd1563e4d4" --request PUT --data $(cat backend_url.txt) https://api.memstash.io/values/backend
              curl -H "token: a9aafe79-89cc-4014-a391-25cd1563e4d4" --request GET https://api.memstash.io/values/backend >> .circleci/ansible/inventory.txt
                   
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt    
      - destroy-environment
          
        
   

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      # Checkout code from git
      - add_ssh_keys:
          fingerprints: ["8d:2a:24:bc:9d:3f:a4:0b:51:09:bd:9d:e0:53:25:57"]
      # Add ssh keys with fingerprint
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
           pip install --upgrade pip
           pip install awscli
           apk add ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook configure-server.yml -i inventory.txt
      - destroy-environment

      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      - checkout
      # Checkout code from git
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install AWS CLI dependencies
          command: |
              sudo apt-get update && sudo apt-get install -yy less
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
        
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations >> db_success.txt      
      - run:
          name: Send migration results to memstash
          command: |
              if (( grep has been executed successfully db_success.txt ))  
              then
                  curl -H "Content-Type: text/plain" -H "token: 46bbfdbc-6e4a-4446-9faa-56a5c2058c33" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              else
                  curl -H "Content-Type: text/plain" -H "token: 46bbfdbc-6e4a-4446-9faa-56a5c2058c33" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              fi
      - revert-migrations
          
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
              sudo apt-get update && sudo apt-get install -yy less
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
                  
      #- run:
          #name: Get backend url
          #command: |
            # your code here
            #URL=$(curl -H "token: a9aafe79-89cc-4014-a391-25cd1563e4d4" --request GET https://api.memstash.io/values/backend)
            #export API_URL="http://${URL}:3030" 
            #curl -H "Content-Type: text/plain" -H "token: 7d785f18-ed4c-4b0a-b371-f672266ac661" --request PUT --data ${API_URL} https://api.memstash.io/values/backendurl
            #pwd
            #ls
            
      - run:
          name: Deploy frontend objects
          command: |
              URL=$(curl -H "token: a9aafe79-89cc-4014-a391-25cd1563e4d4" --request GET https://api.memstash.io/values/backend)
              export API_URL="http://${URL}:3030" 
              curl -H "Content-Type: text/plain" -H "token: 7d785f18-ed4c-4b0a-b371-f672266ac661" --request PUT --data ${API_URL} https://api.memstash.io/values/backendurl    
              cd frontend
              npx browserslist@latest --update-db
              npm install
              npm run build
              npx browserslist@latest --update-db
              aws s3 cp ./dist/ s3://udapeople-u15ch1136f/ --recursive

            # your code here
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          to: "s3f"
            
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      - checkout  
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["8d:2a:24:bc:9d:3f:a4:0b:51:09:bd:9d:e0:53:25:57"]

      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            pip install --upgrade pip
            pip install awscli
            apk add --update nodejs npm ansible zip
      
            # your code here
      - run:
          name: Deploy backend
          command: |
              cd backend
              apk add --update nodejs-npm
              apk add --update npm
              npm install
              npm run build
              echo build successful
      - run:
          name: Configure server
          command: |
              echo ENVIROMENT=production > "backend/dist/.env"
              echo TYPEORM_CONNECTION=postgres >> "backend/dist/.env"
              echo TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js} >> "backend/dist/.env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/dist/.env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/dist/.env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/dist/.env"
              echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/dist/.env"
              echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/dist/.env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/dist/.env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/dist/.env"
          
      - run:
          name: Configure server
          command: |    
              cd /root/project/backend/dist
              tar czf dist.tar.gz .
              mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
              mv dist.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
              cd /root/project/backend/node_modules
              tar czf node_modules.tar.gz .
              mv node_modules.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
              pwd
              cd /root/project/.circleci/ansible
              ansible-playbook deploy-backend.yml -i inventory.txt 

            # your code here
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          to: "backend"
          

  smoke-test:
    docker: 
      - image: python:3.7-alpine3.11
      # Lightweight Docker image 
    steps:
      - checkout
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            #apt update
            #apt upgrade
            apk add --update curl
            pip install --upgrade pip
            pip install awscli
            # your code here

      - attach_workspace:
          at: ~/
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-u15ch1136f.s3-website-us-east-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
            return 0
            else
            return 1
            fi

      - run:
          name: Get backend url
          command: |
            BACKEND=$(curl -H "token: 7d785f18-ed4c-4b0a-b371-f672266ac661" --request GET https://api.memstash.io/values/backendurl)
            if curl -s ${BACKEND}/api/status | grep "ok"
            then
            return 0
            else
            return 1
            fi
      - destroy-environment
          

      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      # Checkout code from git
      #- run:
          #name: Install dependencies
          #command: |
              #npm install
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
              export OldWorkflow=$(aws cloudformation \
                  list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                  --no-paginate --output text)
              curl -H "Content-Type: text/plain" -H "token: a0ba2ffd-167a-4fb4-aae7-03be0be616b3" --request PUT --data ${OldWorkflow} https://api.memstash.io/values/old
              aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udacity-cloudfront \
              --stack-name cloudfront \
              --parameter-overrides WorkflowID=u15ch1136f 
            # your code here
      - destroy-environment
          
      # Here's where you will add some code to rollback on failure  

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        # Checkout code from git
        - run:
            name: Get old stack workflow id
            command: |
                  export OldWorkflowID=$(curl -H "token: a0ba2ffd-167a-4fb4-aae7-03be0be616b3" --request GET https://api.memstash.io/values/old)
                  export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                  --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
                  if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
                  then
                  aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
                  aws cloudformation delete-stack --stack-name backend${OldWorkflowID}
                  aws cloudformation delete-stack --stack-name frontend${OldWorkflowID}
    
                  fi
            

workflows:
  default: 
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]